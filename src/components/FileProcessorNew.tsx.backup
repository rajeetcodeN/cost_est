import React, { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { toast } from 'sonner';
import jsPDF from 'jspdf';

// --- TypeScript Interfaces for Data Structures ---
interface DocumentHeader {
  supplier_name: string;
  customer_name: string;
  type_of_document: string;
  date: string;
  customer_number: string;
  order_or_rfq_number: string;
}

interface Dimensions {
  width: number;
  height: number;
  depth: number;
}

interface ExtractedItem {
  id: number;
  pos: number;
  article_name: string;
  supplier_material_number: string;
  customer_material_number: string;
  qty: number;
  unit: string;
  deliveryDate: string;
  productGroup: string;
  material: string;
  // Support both formats
  width?: number;
  height?: number;
  depth?: number;
  dimensions?: Dimensions;
  weight: number;
  bore: string;
  coating: string;
  hardening: string;
  tolerance: string;
  price: number;
}

// --- Main React Component ---
const FileProcessor: React.FC = () => {
  // --- State Management ---
  const [isDataExtracted, setIsDataExtracted] = useState<boolean>(false);
  const [view, setView] = useState<'card' | 'table'>('card');
  const [headerData, setHeaderData] = useState<DocumentHeader | null>(null);
  const [items, setItems] = useState<ExtractedItem[]>([]);
  const [lastUploadedFile, setLastUploadedFile] = useState<File | null>(null);
  const [lastPastedText, setLastPastedText] = useState<string>("");
  const [uploadStatus, setUploadStatus] = useState<string>("");
  const [isProcessing, setIsProcessing] = useState<boolean>(false);
  const [totalCost, setTotalCost] = useState<number>(0);

  const N8N_WEBHOOK_URL = 'https://nosta.app.n8n.cloud/webhook/f8957a80-b4c3-4bb4-b3c0-256624cbcc40';

  // --- Effects ---
  useEffect(() => {
    // Calculate total cost whenever items change
    const newTotal = items.reduce((acc, item) => acc + (item.qty * item.price), 0);
    setTotalCost(newTotal);
  }, [items]);

  // --- Event Handlers & Logic ---
  const handleFileSelect = async (files: FileList | null) => {
    if (!files || files.length === 0) return;

    const file = files[0];
    const validTypes = [
      'image/jpeg', 'image/png', 'image/gif', 'image/webp',
      'application/pdf',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      'application/msword',
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      'application/vnd.ms-excel'
    ];

    if (!validTypes.includes(file.type)) {
      toast.error('Unsupported file type. Please upload an image, PDF, Word, or Excel file.');
      return;
    }

    setLastUploadedFile(file);
    setUploadStatus(`Processing ${file.name}...`);
    setLastPastedText("");
    setIsProcessing(true);

    try {
      await sendToWebhook(file);
      // After successful upload, process the file
      processDocument(file);
    } catch (error) {
      console.error('Error processing file:', error);
      toast.error(`Error: ${(error as Error).message}`);
      setUploadStatus('Failed to process file');
      setIsProcessing(false);
    }
  };

  const handleReset = () => {
    setIsDataExtracted(false);
    setUploadStatus("");
    setLastUploadedFile(null);
    setLastPastedText("");
    setItems([]);
    setHeaderData(null);
    // Resetting file inputs by targeting them via ID
    (document.getElementById('image-upload') as HTMLInputElement).value = '';
    (document.getElementById('pdf-upload') as HTMLInputElement).value = '';
    (document.getElementById('doc-upload') as HTMLInputElement).value = '';
    (document.getElementById('excel-upload') as HTMLInputElement).value = '';
  };
  
  const processDocument = async (file: File) => {
    try {
      // If we have a file, it's already been sent to the webhook
      // Now we'll just update the UI with the response
      // In a real implementation, you would process the webhook response here
      
      // For now, we'll use mock data as a fallback
      // In a production environment, you would use the actual response from the webhook
      setUploadStatus('Processing complete!');
      populateDataViewWithMock();
      setIsDataExtracted(true);
    } catch (error) {
      console.error('Error processing document:', error);
      toast.error('Failed to process document');
    }
  };

  const sendToWebhook = async (file: File) => {
    const N8N_WEBHOOK_URL = 'https://nosta.app.n8n.cloud/webhook/f8957a80-b4c3-4bb4-b3c0-256624cbcc40';
    setUploadStatus('Sending to n8n workflow. This may take a few minutes...');
    setIsProcessing(true);

    // Check if the file exists and has content
    if (!file) {
      const error = new Error('No file provided for upload');
      setUploadStatus('Error: No file provided');
      throw error;
    }

    const formData = new FormData();
    formData.append('file', file);

    // Log file info for debugging
    console.log('File info:', {
      name: file.name,
      size: file.size,
      type: file.type,
      lastModified: new Date(file.lastModified).toISOString()
    });

    try {
      console.log('Initiating fetch request to:', N8N_WEBHOOK_URL);
      
      const response = await fetch(N8N_WEBHOOK_URL, {
        method: 'POST',
        body: formData,
        // Don't set Content-Type header - let the browser set it with the correct boundary
        headers: {
          'Accept': 'application/json',
        },
        // Keep the connection alive for long-running requests
        keepalive: true,
      });

      console.log('Received response, status:', response.status);
      
      // First, read the response as text for debugging
      const responseText = await response.text();
      console.log('Response text:', responseText);
      
      if (!response.ok) {
        console.error('Webhook error response:', {
          status: response.status,
          statusText: response.statusText,
          headers: Object.fromEntries(response.headers.entries()),
          body: responseText
        });
        throw new Error(`Server responded with ${response.status}: ${response.statusText}`);
      }

      // Try to parse the response as JSON
      let result;
      try {
        result = JSON.parse(responseText);
        console.log('Parsed response data:', result);
      } catch (jsonError) {
        console.warn('Failed to parse JSON response, but request was successful. Response:', responseText);
        throw new Error('Received invalid JSON response from server');
      }

      // Process the response data
      if (result) {
        console.log('Raw result from API:', JSON.stringify(result, null, 2));
        
        // Handle both array and object responses
        const responseData = result;
        
        console.log('Processing response data:', responseData);

        // Check if we have the expected data structure
        if (responseData.requested_items && Array.isArray(responseData.requested_items)) {
          console.log('Found requested_items array with length:', responseData.requested_items.length);
          
          // Update header data
          const headerData = {
            supplier_name: responseData.supplier_name || 'N/A',
            customer_name: responseData.customer_name || 'N/A',
            type_of_document: responseData.type_of_document || 'RFQ',
            date: responseData.date || new Date().toISOString().split('T')[0],
            customer_number: responseData.customer_number || 'N/A',
            order_or_rfq_number: responseData.order_or_rfq_number || 'N/A'
          };
          
          console.log('Setting header data:', headerData);
          setHeaderData(headerData);

          // Map the requested_items to the ExtractedItem format
          const extractedItems = responseData.requested_items.map((item: any, index: number) => {
            // Extract dimensions from item.dimensions or article_name
            let width = 0, height = 0, depth = 0;
            
            // First try to get dimensions from the dimensions field (could be object or string)
            if (item.dimensions) {
              if (typeof item.dimensions === 'string') {
                // Handle string format: 'width x height x depth'
                const dims = item.dimensions.split('x').map(d => d.trim());
                if (dims.length === 3) {
                  width = parseFloat(dims[0]) || 0;
                  height = parseFloat(dims[1]) || 0;
                  depth = parseFloat(dims[2]) || 0;
                  console.log(`Extracted dimensions from string: ${width}x${height}x${depth}`);
                }
              } else if (typeof item.dimensions === 'object' && item.dimensions !== null) {
                // Handle object format: { width: number, height: number, depth: number }
                width = parseFloat(item.dimensions.width) || 0;
                height = parseFloat(item.dimensions.height) || 0;
                depth = parseFloat(item.dimensions.depth) || 0;
                console.log(`Extracted dimensions from object: ${width}x${height}x${depth}`);
              }
            }
            // Fallback to individual dimension fields if dimensions field is not available
            else if (item.width !== undefined || item.height !== undefined || item.depth !== undefined) {
              width = parseFloat(item.width) || 0;
              height = parseFloat(item.height) || 0;
              depth = parseFloat(item.depth) || 0;
              console.log(`Extracted dimensions from individual fields: ${width}x${height}x${depth}`);
            }
            // Last resort: try to extract from article_name
            else if (item.article_name) {
              const dimensionMatch = item.article_name.match(/(\d+(\.\d+)?)\s*[xX]\s*(\d+(\.\d+)?)\s*[xX]\s*(\d+(\.\d+)?)/);
              if (dimensionMatch) {
                width = parseFloat(dimensionMatch[1]) || 0;
                height = parseFloat(dimensionMatch[3]) || 0;
                depth = parseFloat(dimensionMatch[5]) || 0;
                console.log(`Extracted dimensions from article_name: ${width}x${height}x${depth}`);
              }
            }

            // Handle both dimension formats
            const dimensions = item.dimensions || {
              width: item.width,
              height: item.height,
              depth: item.depth
            };

            const mappedItem: ExtractedItem = {
              id: index + 1,
              pos: item.pos || index + 1,
              article_name: item.article_name || 'Unnamed Article',
              supplier_material_number: item.supplier_material_number || 'N/A',
              customer_material_number: item.customer_material_number || 'N/A',
              qty: Number(item.quantity || item.qty) || 1,
              unit: item.unit || 'pcs',
              deliveryDate: item.delivery_date || item.deliveryDate || 'N/A',
              productGroup: item.productGroup || 'Passfeder',
              material: item.material || 'C45K',
              // Set both formats for backward compatibility
              width: dimensions?.width,
              height: dimensions?.height,
              depth: dimensions?.depth,
              dimensions: dimensions,
              weight: item.weight || 0,
              bore: item.bore || '',
              coating: item.coating || '',
              hardening: item.hardening || '',
              tolerance: item.tolerance || '',
              price: item.price || 0
            };
            console.log(`Mapped item ${index + 1}:`, mappedItem);
            return mappedItem;
          });

          console.log('Setting items state with:', extractedItems.length, 'items');
          setItems(extractedItems);
          setIsDataExtracted(true);
          setUploadStatus('Data processed successfully!');
          
          // Force a re-render to show the data
          setTimeout(() => {
            console.log('Forcing state update to refresh UI');
            setItems([...extractedItems]);
          }, 100);
          
          return { success: true, items: extractedItems };
        } else {
          console.warn('Unexpected response format - missing requested_items array');
          console.log('Full response data:', responseData);
          throw new Error('Unexpected response format from server');
        }
      } else {
        throw new Error('Empty response from server');
      }

    } catch (error) {
      console.error('Webhook Error:', error);
      let errorMessage = 'Failed to process file';

      if (error instanceof Error) {
        if (error.message.includes('Failed to fetch')) {
          errorMessage = 'Failed to connect to the server. Please check your internet connection.';
        } else if (error.message.includes('NetworkError')) {
          errorMessage = 'Network error occurred. Please check your connection and try again.';
        } else if (error.message.includes('timeout') || error.name === 'TimeoutError') {
          errorMessage = 'Request timed out. The server is taking too long to respond.';
        } else {
          errorMessage = error.message;
        }
      }

      setUploadStatus(`Error: ${errorMessage}`);
      throw new Error(errorMessage);
    } finally {
      setIsProcessing(false);
    }
  };

  const generatePdf = async () => {
    const savePdfBtn = document.getElementById('save-pdf-btn');
    const originalButtonText = savePdfBtn?.textContent || 'Save as PDF';
    
    try {
      if (savePdfBtn) {
        savePdfBtn.textContent = 'Generating PDF...';
        savePdfBtn.setAttribute('disabled', 'true');
      }

      const { jsPDF } = await import('jspdf');
      const autoTable = (await import('jspdf-autotable')).default;
      const doc = new jsPDF();
      
      // Set document properties
      doc.setProperties({
        title: 'Nosta Quote',
        subject: 'Quote',
        author: 'Nosta GmbH',
        keywords: 'quote, nostagmbh',
        creator: 'Nosta Quote AI'
      });

      // Add title
      doc.setFontSize(20);
      doc.text('NOSTA GMBH', 105, 20, { align: 'center' });
      doc.setFontSize(16);
      doc.text('QUOTATION', 105, 30, { align: 'center' });

      // Add header information
      doc.setFontSize(12);
      if (headerData) {
        doc.text(`Customer: ${headerData.customer_name}`, 20, 50);
        doc.text(`Document: ${headerData.type_of_document} ${headerData.order_or_rfq_number || ''}`, 20, 60);
        doc.text(`Date: ${headerData.date || new Date().toLocaleDateString()}`, 20, 70);
      } else {
        doc.text(`Date: ${new Date().toLocaleDateString()}`, 20, 50);
      }
      
      // Add table with extracted items
      autoTable(doc, {
        startY: headerData ? 80 : 60,
        head: [['#', 'Article', 'Qty', 'Unit', 'Price', 'Total']],
        body: items.map(item => [
          item.pos.toString(),
          item.article_name,
          item.qty.toString(),
          item.unit,
          `${item.price.toFixed(2)} EUR`,
          `${(item.qty * item.price).toFixed(2)} EUR`
        ]),
        headStyles: {
          fillColor: [59, 130, 246], // blue-500
          textColor: 255,
          fontStyle: 'bold'
        },
        margin: { top: 20 }
      });
      
      // Add total cost
      const finalY = (doc as any).lastAutoTable.finalY + 10;
      doc.setFontSize(14);
      doc.setFont(undefined, 'bold');
      doc.text(`Total Cost: ${totalCost.toFixed(2)} EUR`, 14, finalY);
      
      doc.save(`nosta-quote-${new Date().toISOString().split('T')[0]}.pdf`);
      toast.success('PDF generated successfully!');
      
    } catch (error) {
      console.error('Error generating PDF:', error);
      toast.error('Failed to generate PDF');
    } finally {
      if (savePdfBtn) {
        savePdfBtn.textContent = originalButtonText;
        savePdfBtn.removeAttribute('disabled');
      }
    }
  };

  const populateDataViewWithMock = () => {
    const mockFullData = {
      "supplier_name": "Nosta GmbH", 
      "customer_name": "Ferdinand Gross GmbH & Co. KG", 
      "type_of_document": "RFQ", 
      "date": "2025-06-03", 
      "customer_number": "923776", 
      "order_or_rfq_number": "1172482",
      "requested_items": [
        { 
          "pos": 1, 
          "article_name": "DIN 6885 C45K B 6x4x10", 
          "supplier_material_number": "00111488", 
          "customer_material_number": "8500B0604010", 
          "quantity": 400, 
          "unit": "St", 
          "delivery_date": "2025-06-23" 
        },
        { 
          "pos": 2, 
          "article_name": "DIN 6885 C45K B 6x4x12", 
          "supplier_material_number": "00111128", 
          "customer_material_number": "", 
          "quantity": 500, 
          "unit": "St", 
          "delivery_date": "2025-06-23" 
        }
      ]
    };

    setHeaderData({
      supplier_name: mockFullData.supplier_name, 
      customer_name: mockFullData.customer_name, 
      type_of_document: mockFullData.type_of_document, 
      date: mockFullData.date, 
      customer_number: mockFullData.customer_number, 
      order_or_rfq_number: mockFullData.order_or_rfq_number
    });

    const newItems = mockFullData.requested_items.map(item => ({
      id: item.pos, 
      pos: item.pos, 
      article_name: item.article_name, 
      supplier_material_number: item.supplier_material_number, 
      customer_material_number: item.customer_material_number || "",
      qty: item.quantity, 
      unit: item.unit, 
      deliveryDate: item.delivery_date, 
      productGroup: "Passfeder", 
      material: "C45K",
      width: 6, 
      height: 4, 
      depth: item.pos === 1 ? 10 : 12, 
      weight: 0, 
      bore: "", 
      coating: "", 
      hardening: "", 
      tolerance: "", 
      price: 0.50
    }));
    
    setItems(newItems);
  };
  
  const updateItemData = (index: number, prop: keyof ExtractedItem, value: any) => {
    const newItems = [...items];
    const itemToUpdate = newItems[index];

    if (itemToUpdate) {
      if (['qty', 'price', 'width', 'height', 'depth', 'weight'].includes(prop)) {
        (itemToUpdate as any)[prop] = parseFloat(value) || 0;
      } else {
        (itemToUpdate as any)[prop] = value;
      }
      setItems(newItems);
    }
  };

  const formatCurrency = (amount: number): string => {
    return `$${(amount || 0).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
  };

  // --- Render ---
  return (
    <div className="w-full h-full p-0 m-0">
      <div className="w-full h-full p-4">
        {!isDataExtracted ? (
          <div id="initial-upload-view" className="w-full">
            <h2 className="text-2xl font-semibold mb-4 text-center">Upload Document</h2>
            <div className="mb-4">
              <label 
                htmlFor="document-upload" 
                className="flex flex-col items-center p-8 rounded-lg border-2 border-dashed border-gray-300 cursor-pointer hover:bg-gray-50 transition-colors"
              >
                <div className="flex flex-col items-center">
                  <svg className="w-12 h-12 text-gray-400 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                  </svg>
                  <h3 className="text-lg font-medium text-gray-700 mb-1">Upload Document</h3>
                  <p className="text-sm text-gray-500 mb-2">Drag and drop your file here, or click to browse</p>
                  <p className="text-xs text-gray-400">Supports: Images, PDF, Word, Excel (Max 10MB)</p>
                </div>
                <input 
                  id="document-upload" 
                  type="file" 
                  className="hidden" 
                  accept="image/*,.pdf,.doc,.docx,.xls,.xlsx" 
                  onChange={(e) => handleFileSelect(e.target.files)}
                />
              </label>
              {uploadStatus && (
                <p className="mt-2 text-sm text-center text-blue-600">{uploadStatus}</p>
              )}
            </div>
            <div className="flex items-center my-4">
              <div className="flex-grow border-t"></div>
              <span className="mx-4 text-sm text-gray-500">or</span>
              <div className="flex-grow border-t"></div>
            </div>
            <textarea 
              id="text-input" 
              rows={10} 
              className="w-full p-3 bg-gray-50 border-gray-300 rounded-md" 
              placeholder="Paste RFQ text here..." 
              value={lastPastedText} 
              onChange={(e) => {
                setLastPastedText(e.target.value); 
                setLastUploadedFile(null); 
                setUploadStatus('')
              }}
            ></textarea>
            <p id="upload-status" className="text-center text-sm text-gray-600 h-5 mt-2">{uploadStatus}</p>
            <button 
              id="process-btn" 
              onClick={processDocument} 
              className="mt-4 w-full bg-blue-600 text-white font-semibold py-3 px-4 rounded-lg hover:bg-blue-700 text-lg disabled:bg-blue-400" 
              disabled={isProcessing}
            >
              {isProcessing ? 'Processing...' : 'Extract Data'}
            </button>
          </div>
        ) : (
          <div id="data-view" className="w-full h-full flex flex-col">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-2xl font-semibold">Verify Extracted Data</h2> 
              <button onClick={handleReset} className="text-sm text-blue-500 hover:underline">Start Over</button>
            </div>
            <div className="flex flex-1 gap-6 h-[calc(100vh-150px)]">
              {/* Data Panel - Left Side - 60% */}
              <div className="w-3/5 h-full flex flex-col">
                <div id="extraction-panel" className="bg-white p-4 rounded-lg border border-gray-200 shadow-sm h-full flex flex-col">
                  <div id="pdf-content-wrapper" className="flex-grow overflow-y-auto pr-2">
                    <div id="document-header-info" className="mb-6 p-4 border rounded-lg bg-gray-50">
                      <h3 className="text-lg font-semibold mb-3 text-gray-800 border-b pb-2">Document Details</h3>
                      <div className="grid grid-cols-2 gap-4 text-sm mt-3">
                        <div>
                          <label className="text-xs font-bold text-gray-500">Supplier Name</label>
                          <input 
                            type="text" 
                            value={headerData.supplier_name} 
                            onChange={(e) => setHeaderData({...headerData, supplier_name: e.target.value})} 
                            className="mt-1 w-full p-2 border rounded-md bg-white"
                          />
                        </div>
                        <div>
                          <label className="text-xs font-bold text-gray-500">Customer Name</label>
                          <input 
                            type="text" 
                            value={headerData.customer_name} 
                            onChange={(e) => setHeaderData({...headerData, customer_name: e.target.value})} 
                            className="mt-1 w-full p-2 border rounded-md bg-white"
                          />
                        </div>
                        <div>
                          <label className="text-xs font-bold text-gray-500">Document Type</label>
                          <input 
                            type="text" 
                            value={headerData.type_of_document} 
                            onChange={(e) => setHeaderData({...headerData, type_of_document: e.target.value})} 
                            className="mt-1 w-full p-2 border rounded-md bg-white"
                          />
                        </div>
                        <div>
                          <label className="text-xs font-bold text-gray-500">Document Date</label>
                          <input 
                            type="date" 
                            value={headerData.date} 
                            onChange={(e) => setHeaderData({...headerData, date: e.target.value})} 
                            className="mt-1 w-full p-2 border rounded-md bg-white"
                          />
                        </div>
                        <div>
                          <label className="text-xs font-bold text-gray-500">Customer Number</label>
                          <input 
                            type="text" 
                            value={headerData.customer_number} 
                            onChange={(e) => setHeaderData({...headerData, customer_number: e.target.value})} 
                            className="mt-1 w-full p-2 border rounded-md bg-white"
                          />
                        </div>
                        <div>
                          <label className="text-xs font-bold text-gray-500">RFQ/Order Number</label>
                          <input 
                            type="text" 
                            value={headerData.order_or_rfq_number} 
                            onChange={(e) => setHeaderData({...headerData, order_or_rfq_number: e.target.value})} 
                            className="mt-1 w-full p-2 border rounded-md bg-white"
                          />
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex justify-end mb-2">
                    <div className="inline-flex rounded-md shadow-sm">
                      <button 
                        onClick={() => setView('card')} 
                        className={`py-1 px-3 text-sm font-medium rounded-l-lg border ${
                          view === 'card' ? 'bg-blue-600 text-white' : 'bg-white text-gray-900'
                        }`}
                      >
                        Card View
                      </button>
                      <button 
                        onClick={() => setView('table')} 
                        className={`py-1 px-3 text-sm font-medium rounded-r-lg border ${
                          view === 'table' ? 'bg-blue-600 text-white' : 'bg-white text-gray-900'
                        }`}
                      >
                        Table View
                      </button>
                    </div>
                  </div>

                  {view === 'card' ? (
                    <div id="extracted-data-list" className="space-y-4">
                      {items.map((item, index) => (
                        <div key={item.id} className="extracted-item p-4 bg-gray-50 rounded-lg border">
                          <p className="text-sm font-bold text-gray-500 mb-3 border-b pb-2">PRODUCT {item.pos}</p>
                          <div className="grid grid-cols-1 md:grid-cols-3 gap-x-6 gap-y-4">
                            <div>
                              <label className="text-xs font-bold text-gray-500">Product Group</label>
                              <input 
                                type="text" 
                                value={item.productGroup} 
                                onChange={e => updateItemData(index, 'productGroup', e.target.value)} 
                                className="mt-1 w-full p-2 border rounded-md bg-white"
                              />
                            </div>
                            <div>
                              <label className="text-xs font-bold text-gray-500">Supplier Material #</label>
                              <input 
                                type="text" 
                                value={item.supplier_material_number} 
                                onChange={e => updateItemData(index, 'supplier_material_number', e.target.value)} 
                                className="mt-1 w-full p-2 border rounded-md bg-white"
                              />
                            </div>
                            <div>
                              <label className="text-xs font-bold text-gray-500">Customer Material #</label>
                              <input 
                                type="text" 
                                value={item.customer_material_number} 
                                onChange={e => updateItemData(index, 'customer_material_number', e.target.value)} 
                                className="mt-1 w-full p-2 border rounded-md bg-white"
                              />
                            </div>
                            <div className="md:col-span-3">
                              <label className="text-xs font-bold text-gray-500">Article Name / Description</label>
                              <input 
                                type="text" 
                                value={item.article_name} 
                                onChange={e => updateItemData(index, 'article_name', e.target.value)} 
                                className="mt-1 w-full p-2 border rounded-md bg-white"
                              />
                            </div>
                          </div>
                          <div className="mt-4 pt-4 border-t">
                            <div className="grid grid-cols-2 md:grid-cols-3 gap-x-4 gap-y-4">
                              <div>
                                <label className="text-xs font-bold text-gray-500">Quantity</label>
                                <input 
                                  type="number" 
                                  value={item.qty} 
                                  onChange={e => updateItemData(index, 'qty', e.target.value)} 
                                  className="mt-1 w-full p-2 border rounded-md bg-white"
                                />
                              </div>
                              <div>
                                <label className="text-xs font-bold text-gray-500">Unit</label>
                                <input 
                                  type="text" 
                                  value={item.unit} 
                                  onChange={e => updateItemData(index, 'unit', e.target.value)} 
                                  className="mt-1 w-full p-2 border rounded-md bg-white"
                                />
                              </div>
                              <div>
                                <label className="text-xs font-bold text-gray-500">Unit Price</label>
                                <input 
                                  type="number" 
                                  step="0.01" 
                                  value={item.price} 
                                  onChange={e => updateItemData(index, 'price', e.target.value)} 
                                  className="mt-1 w-full p-2 border rounded-md bg-white"
                                />
                              </div>
                              <div>
                                <label className="text-xs font-bold text-gray-500">Width (mm)</label>
                                <input 
                                  type="number" 
                                  step="0.01" 
                                  value={item.width} 
                                  onChange={e => updateItemData(index, 'width', e.target.value)} 
                                  className="mt-1 w-full p-2 border rounded-md bg-white"
                                />
                              </div>
                              <div>
                                <label className="text-xs font-bold text-gray-500">Height (mm)</label>
                                <input 
                                  type="number" 
                                  step="0.01" 
                                  value={item.height} 
                                  onChange={e => updateItemData(index, 'height', e.target.value)} 
                                  className="mt-1 w-full p-2 border rounded-md bg-white"
                                />
                              </div>
                              <div>
                                <label className="text-xs font-bold text-gray-500">Depth (mm)</label>
                                <input 
                                  type="number" 
                                  step="0.01" 
                                  value={item.depth} 
                                  onChange={e => updateItemData(index, 'depth', e.target.value)} 
                                  className="mt-1 w-full p-2 border rounded-md bg-white"
                                />
                              </div>
                              <div>
                                <label className="text-xs font-bold text-gray-500">Weight (g)</label>
                                <input 
                                  type="number" 
                                  step="0.01" 
                                  value={item.weight} 
                                  onChange={e => updateItemData(index, 'weight', e.target.value)} 
                                  className="mt-1 w-full p-2 border rounded-md bg-white"
                                />
                              </div>
                              <div>
                                <label className="text-xs font-bold text-gray-500">Bore</label>
                                <input 
                                  type="text" 
                                  value={item.bore} 
                                  onChange={e => updateItemData(index, 'bore', e.target.value)} 
                                  className="mt-1 w-full p-2 border rounded-md bg-white"
                                />
                              </div>
                              <div>
                                <label className="text-xs font-bold text-gray-500">Coating</label>
                                <input 
                                  type="text" 
                                  value={item.coating} 
                                  onChange={e => updateItemData(index, 'coating', e.target.value)} 
                                  className="mt-1 w-full p-2 border rounded-md bg-white"
                                />
                              </div>
                              <div>
                                <label className="text-xs font-bold text-gray-500">Hardening</label>
                                <input 
                                  type="text" 
                                  value={item.hardening} 
                                  onChange={e => updateItemData(index, 'hardening', e.target.value)} 
                                  className="mt-1 w-full p-2 border rounded-md bg-white"
                                />
                              </div>
                              <div>
                                <label className="text-xs font-bold text-gray-500">Tolerance</label>
                                <input 
                                  type="text" 
                                  value={item.tolerance} 
                                  onChange={e => updateItemData(index, 'tolerance', e.target.value)} 
                                  className="mt-1 w-full p-2 border rounded-md bg-white"
                                />
                              </div>
                              <div>
                                <label className="text-xs font-bold text-gray-500">Material</label>
                                <input 
                                  type="text" 
                                  value={item.material} 
                                  onChange={e => updateItemData(index, 'material', e.target.value)} 
                                  className="mt-1 w-full p-2 border rounded-md bg-white"
                                />
                              </div>
                              <div>
                                <label className="text-xs font-bold text-gray-500">Delivery Date</label>
                                <input 
                                  type="date" 
                                  value={item.deliveryDate} 
                                  onChange={e => updateItemData(index, 'deliveryDate', e.target.value)} 
                                  className="mt-1 w-full p-2 border rounded-md bg-white"
                                />
                              </div>
                            </div>
                          </div>
                          <p className="text-right text-base mt-4 font-semibold">
                            Subtotal: <span className="font-bold text-blue-600">{formatCurrency(item.qty * item.price)}</span>
                          </p>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div id="glance-view-container" className="overflow-x-auto">
                      <table className="min-w-full divide-y divide-gray-200 text-sm">
                        <thead className="bg-gray-50">
                          <tr>
                            <th className="px-3 py-2 text-left font-medium text-gray-500">Pos</th>
                            <th className="px-3 py-2 text-left font-medium text-gray-500">Article Name</th>
                            <th className="px-3 py-2 text-left font-medium text-gray-500">Qty</th>
                            <th className="px-3 py-2 text-left font-medium text-gray-500">Unit</th>
                            <th className="px-3 py-2 text-left font-medium text-gray-500">Unit Price</th>
                            <th className="px-3 py-2 text-left font-medium text-gray-500">Subtotal</th>
                          </tr>
                        </thead>
                        <tbody id="glance-table-body" className="bg-white divide-y divide-gray-200">
                          {items.map((item, index) => (
                            <tr key={item.id}>
                              <td className="px-3 py-2">{item.pos}</td>
                              <td className="px-3 py-2">
                                <input 
                                  type="text" 
                                  value={item.article_name} 
                                  onChange={e => updateItemData(index, 'article_name', e.target.value)} 
                                  className="w-full p-1 border rounded"
                                />
                              </td>
                              <td className="px-3 py-2">
                                <input 
                                  type="number" 
                                  value={item.qty} 
                                  onChange={e => updateItemData(index, 'qty', e.target.value)} 
                                  className="w-20 p-1 border rounded"
                                />
                              </td>
                              <td className="px-3 py-2">
                                <input 
                                  type="text" 
                                  value={item.unit} 
                                  onChange={e => updateItemData(index, 'unit', e.target.value)} 
                                  className="w-16 p-1 border rounded"
                                />
                              </td>
                              <td className="px-3 py-2">
                                <input 
                                  type="number" 
                                  step="0.01" 
                                  value={item.price} 
                                  onChange={e => updateItemData(index, 'price', e.target.value)} 
                                  className="w-24 p-1 border rounded"
                                />
                              </td>
                              <td className="px-3 py-2 font-semibold">
                                {formatCurrency(item.qty * item.price)}
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  )}
                </div>
                
                <div className="mt-auto pt-4 border-t"> 
                  <div className="flex justify-between items-center text-xl font-bold">
                    <span>Total Cost</span>
                    <span id="extracted-total-cost">{formatCurrency(totalCost)}</span>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-4 mt-4">
              <button className="w-full bg-indigo-600 text-white font-semibold py-3 px-4 rounded-lg hover:bg-indigo-700">
                Save Record
              </button>
              <button 
                id="save-pdf-btn" 
                onClick={generatePdf} 
                className="w-full bg-green-600 text-white font-semibold py-3 px-4 rounded-lg hover:bg-green-700"
              >
                Save as PDF
              </button>
            </div>
          </div>
          
          {/* Preview Panel - Right Side - 40% */}
          <div className="w-2/5 h-full flex flex-col">
            <div className="bg-white p-4 rounded-lg border border-gray-200 shadow-sm h-full flex flex-col">
              <h3 className="text-lg font-semibold mb-4 text-gray-800 border-b pb-2">Document Preview</h3>
              <div id="preview-content" className="flex-grow overflow-auto bg-gray-50 rounded-md p-2">
                {lastUploadedFile && lastUploadedFile.type.startsWith('image/') && (
                  <img src={URL.createObjectURL(lastUploadedFile)} className="max-w-full h-auto mx-auto rounded shadow" alt="Document Preview"/>
                )}
                {lastUploadedFile && lastUploadedFile.type === 'application/pdf' && (
                  <iframe 
                    src={`${URL.createObjectURL(lastUploadedFile)}#toolbar=0&navpanes=0`} 
                    className="w-full h-full border-0 bg-white" 
                    title="PDF Preview"
                  />
                )}
                {lastPastedText && (
                  <div className="bg-white p-4 rounded border">
                    <pre className="whitespace-pre-wrap text-sm font-mono">{lastPastedText}</pre>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    )}
  </div>
);
};

export default FileProcessor;
  </div>
